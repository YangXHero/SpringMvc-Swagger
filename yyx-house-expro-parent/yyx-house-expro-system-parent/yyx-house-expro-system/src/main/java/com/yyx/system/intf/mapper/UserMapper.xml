<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yyx.system.intf.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.yyx.system.entity.User" >
    <id column="us_id" property="id" jdbcType="BIGINT" />
    <result column="us_login_name" property="loginName" jdbcType="VARCHAR" />
    <result column="us_user_type" property="userType" jdbcType="SMALLINT" />
    <result column="us_user_name" property="userName" jdbcType="VARCHAR" />
    <result column="us_dept_id" property="deptId" jdbcType="BIGINT" />
    <result column="us_custom_menu" property="customMenu" jdbcType="VARCHAR" />
    <result column="us_photo_url" property="photoUrl" jdbcType="VARCHAR" />
    <result column="us_password" property="password" jdbcType="VARCHAR" />
    <result column="us_email" property="email" jdbcType="VARCHAR" />
    <result column="us_mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="us_telephone" property="telephone" jdbcType="VARCHAR" />
    <result column="us_creator" property="creator" jdbcType="VARCHAR" />
    <result column="us_hasvalid" property="hasvalid" jdbcType="VARCHAR" />
    <result column="us_creator_id" property="creatorId" jdbcType="BIGINT" />
    <result column="us_create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="us_updator" property="updator" jdbcType="VARCHAR" />
    <result column="us_updator_id" property="updatorId" jdbcType="BIGINT" />
    <result column="us_update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.yyx.system.entity.User" extends="BaseResultMap" >
    <result column="us_head_photo" property="headPhoto" jdbcType="LONGVARBINARY" />
  </resultMap>
  <sql id="Base_Column_List" >
    us.id as us_id, us.login_name as us_login_name, us.user_type as us_user_type, us.user_name as us_user_name, 
    us.dept_id as us_dept_id, us.custom_menu as us_custom_menu, us.photo_url as us_photo_url, 
    us.password as us_password, us.email as us_email, us.mobile as us_mobile, us.telephone as us_telephone, 
    us.creator as us_creator, us.hasvalid as us_hasvalid, us.creator_id as us_creator_id, 
    us.create_time as us_create_time, us.updator as us_updator, us.updator_id as us_updator_id, 
    us.update_time as us_update_time
  </sql>
  <sql id="Blob_Column_List" >
    us.head_photo as us_head_photo
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sys_user_tb us
    where us.id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from sys_user_tb
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.yyx.system.entity.User" >
    insert into sys_user_tb (id, login_name, user_type, 
      user_name, dept_id, custom_menu, 
      photo_url, password, email, 
      mobile, telephone, creator, 
      hasvalid, creator_id, create_time, 
      updator, updator_id, update_time, 
      head_photo)
    values (#{id,jdbcType=BIGINT}, #{loginName,jdbcType=VARCHAR}, #{userType,jdbcType=SMALLINT}, 
      #{userName,jdbcType=VARCHAR}, #{deptId,jdbcType=BIGINT}, #{customMenu,jdbcType=VARCHAR}, 
      #{photoUrl,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{mobile,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}, #{creator,jdbcType=VARCHAR}, 
      #{hasvalid,jdbcType=VARCHAR}, #{creatorId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updator,jdbcType=VARCHAR}, #{updatorId,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{headPhoto,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="com.yyx.system.entity.User" useGeneratedKeys="true" keyProperty="id">
    insert into sys_user_tb
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="loginName != null" >
        login_name,
      </if>
      <if test="userType != null" >
        user_type,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="deptId != null" >
        dept_id,
      </if>
      <if test="customMenu != null" >
        custom_menu,
      </if>
      <if test="photoUrl != null" >
        photo_url,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="telephone != null" >
        telephone,
      </if>
      <if test="creator != null" >
        creator,
      </if>
      <if test="hasvalid != null" >
        hasvalid,
      </if>
      <if test="creatorId != null" >
        creator_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updator != null" >
        updator,
      </if>
      <if test="updatorId != null" >
        updator_id,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="headPhoto != null" >
        head_photo,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="loginName != null" >
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="userType != null" >
        #{userType,jdbcType=SMALLINT},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=BIGINT},
      </if>
      <if test="customMenu != null" >
        #{customMenu,jdbcType=VARCHAR},
      </if>
      <if test="photoUrl != null" >
        #{photoUrl,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null" >
        #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="hasvalid != null" >
        #{hasvalid,jdbcType=VARCHAR},
      </if>
      <if test="creatorId != null" >
        #{creatorId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updator != null" >
        #{updator,jdbcType=VARCHAR},
      </if>
      <if test="updatorId != null" >
        #{updatorId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="headPhoto != null" >
        #{headPhoto,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yyx.system.entity.User" >
    update sys_user_tb
    <set >
      <if test="loginName != null" >
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="userType != null" >
        user_type = #{userType,jdbcType=SMALLINT},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null" >
        dept_id = #{deptId,jdbcType=BIGINT},
      </if>
      <if test="customMenu != null" >
        custom_menu = #{customMenu,jdbcType=VARCHAR},
      </if>
      <if test="photoUrl != null" >
        photo_url = #{photoUrl,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null" >
        telephone = #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="creator != null" >
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="hasvalid != null" >
        hasvalid = #{hasvalid,jdbcType=VARCHAR},
      </if>
      <if test="creatorId != null" >
        creator_id = #{creatorId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updator != null" >
        updator = #{updator,jdbcType=VARCHAR},
      </if>
      <if test="updatorId != null" >
        updator_id = #{updatorId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="headPhoto != null" >
        head_photo = #{headPhoto,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yyx.system.entity.User" >
    update sys_user_tb
    set login_name = #{loginName,jdbcType=VARCHAR},
      user_type = #{userType,jdbcType=SMALLINT},
      user_name = #{userName,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=BIGINT},
      custom_menu = #{customMenu,jdbcType=VARCHAR},
      photo_url = #{photoUrl,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      creator = #{creator,jdbcType=VARCHAR},
      hasvalid = #{hasvalid,jdbcType=VARCHAR},
      creator_id = #{creatorId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      updator = #{updator,jdbcType=VARCHAR},
      updator_id = #{updatorId,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      head_photo = #{headPhoto,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yyx.system.entity.User" >
    update sys_user_tb
    set login_name = #{loginName,jdbcType=VARCHAR},
      user_type = #{userType,jdbcType=SMALLINT},
      user_name = #{userName,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=BIGINT},
      custom_menu = #{customMenu,jdbcType=VARCHAR},
      photo_url = #{photoUrl,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      creator = #{creator,jdbcType=VARCHAR},
      hasvalid = #{hasvalid,jdbcType=VARCHAR},
      creator_id = #{creatorId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      updator = #{updator,jdbcType=VARCHAR},
      updator_id = #{updatorId,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <!-- 修改密码 -->
	<update id="changePassword" parameterType="java.lang.String">
		update sys_user_tb
		<set>
			<if test="newPassword != null">
				PASSWORD = #{newPassword,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{userId,jdbcType=VARCHAR}
	</update>

	<insert id="insertUserRole" parameterType="map">
		insert into sys_user_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="roleId != null">
				role_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=BIGINT},
			</if>
			<if test="roleId != null">
				#{roleId,jdbcType=BIGINT},
			</if>
		</trim>
	</insert>

	<!-- 查询用户列表信息 -->
	<select id="getUserList" parameterType="map"
		resultType="com.alibaba.fastjson.JSONObject">
		SELECT
		u.id AS id,
		u.login_name AS loginName,
		u.user_name AS userName,
		u.hasvalid as hasvalid,
		u.user_type as userType,
		role.role_name AS
		roleName,
		u.mobile AS mobile,
		u.creator as creator,
		u.email as email,
		u.create_time as createTime,
		au.user_name as accessUserName
		FROM
		sys_user_tb u
		LEFT JOIN sys_user_role
		userRole ON u.id = userRole.user_id
		LEFT JOIN sys_role_tb role ON
		userRole.role_id = role.id
		left join access_user au on au.user_id = u.id
		where 1=1 and u.id != 1 and
		u.hasvalid != "-1"
		<if test="null!=userName">
			and u.user_name like CONCAT('%',#{userName},'%')
		</if>
		<if test="null!=addDateMin">
			<![CDATA[   and DATE_FORMAT(u.create_time, '%Y-%m-%d') >= DATE_FORMAT(#{addDateMin}, '%Y-%m-%d')   ]]>
		</if>
		<if test="null!=addDateMax">
			<![CDATA[   and DATE_FORMAT(u.create_time, '%Y-%m-%d') <= DATE_FORMAT(#{addDateMax}, '%Y-%m-%d')   ]]>
		</if>
	</select>

	<!-- 查询用户列表总条数 -->
	<select id="getUserListCount" parameterType="map" resultType="int">
		SELECT
		count(u.id)
		FROM
		sys_user_tb u
		left join sys_user_role userRole on
		u.id=userRole.user_id
		left join
		sys_role_tb role on
		userRole.role_id=role.id
		where 1=1 and u.hasvalid != "-1"
		<if test="null!=userName">
			and u.user_name like CONCAT('%',#{userName},'%')
		</if>
		<if test="null!=deptId">
			and u.dept_id = #{deptId,jdbcType=BIGINT}
		</if>
		<if test="null!=addDateMin">
			<![CDATA[   and DATE_FORMAT(u.create_time, '%Y-%m-%d') >= DATE_FORMAT(#{addDateMin}, '%Y-%m-%d')   ]]>
		</if>
		<if test="null!=addDateMax">
			<![CDATA[   and DATE_FORMAT(u.create_time, '%Y-%m-%d') <= DATE_FORMAT(#{addDateMax}, '%Y-%m-%d')   ]]>
		</if>
	</select>

	<select id="selectUserRoleByMap" resultType="map" parameterType="map">
		select
		ur.user_id as userId,ur.role_id as roleId,ur.id as id
		from
		sys_user_role ur
		where 1=1
		<if test="null!=userId">
			and ur.user_id=#{userId}
		</if>
	</select>
	<!-- 更新用户对应角色 -->
	<update id="updateUserRole" parameterType="map">
		update sys_user_role
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=BIGINT},
			</if>
			<if test="roleId != null">
				role_id = #{roleId,jdbcType=BIGINT},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>

	<select id="selectByMap" resultMap="ResultMapWithBLOBs"
		parameterType="map">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from sys_user_tb us
		left join access_user au on au.user_id = us.id
		where 1=1
		<choose>
			<when test="null!=hasvalid">
				and us.hasvalid=#{hasvalid}
			</when>
			<otherwise>
				and us.hasvalid='1'
			</otherwise>
		</choose>
		<!-- 判断账号是否存在 start -->
		<if test="null!=loginName">
			and (us.login_name = #{loginName,jdbcType=VARCHAR} or au.user_name = #{loginName,jdbcType=VARCHAR})
		</if>
		<if test="null!=userId">
			and us.id = #{userId,jdbcType=BIGINT}
		</if>
		<if test="null!=userIdNoSelf">
			and us.id != #{userIdNoSelf,jdbcType=BIGINT}
		</if>
	</select>
	<!-- 根据登陆用户：获取拥有的菜单权限 -->
	<select id="selectMenuListByMap" parameterType="map"
		resultType="com.alibaba.fastjson.JSONObject">
		SELECT DISTINCT
		t.id AS menuId,
		t. NAME AS menuName,
		t.access,
		t.show_menu AS isShowMenu,
		t.pid,
		t.url AS linkUrl,
		(select count(1) from
		sys_authority_tb s where s.pid=menuId and
		s.show_type='menu') as
		hasChildMenu,
		t.icon_class as iconClass
		FROM
		sys_authority_tb t
		INNER JOIN
		sys_role_authority_tb a ON a.auth_id = t.id
		INNER JOIN
		sys_role_tb r ON
		a.role_id = r.id
		INNER JOIN sys_user_role ur ON r.id =
		ur.role_id
		INNER
		JOIN sys_user_tb u ON ur.user_id = u.id
		WHERE 1=1
		<if test="null!=userId">
			and u.id=#{userId}
		</if>
		<if test="null!=pid">
			and t.pid = #{pid}
		</if>
		<if test="null != menuid">
			and t.id not in
			<foreach collection="menuid" index="index" item="item" open="(" separator="," close=")">  
	            #{item}  
	        </foreach>
		</if>
		<if test="null != customMenu">
			and t.id in
			<foreach collection="customMenu" index="index" item="item" open="(" separator="," close=")">  
	            #{item}  
	        </foreach>
		</if>
		and t.hasvalid='1'
		and t.show_menu='true'
		<!-- add by yaofeng start 根据：用户登录判断isDisButton -->
		<choose>
			<when test="null!=isDisButton and isDisButton =='true'">
				and (t.show_type='menu' or t.show_type='button')
			</when>
			<otherwise>
				and t.show_type='menu'
			</otherwise>
		</choose>
		<!-- add by yaofeng end 根据：用户登录判断isDisButton -->
		order by
		t.orderby_id asc
	</select>
	<!-- 根据登陆用户：获取拥有的角色 -->
	<select id="selectRoles" parameterType="map" resultType="map">
		select
		r.id,r.role_name as roleName,r.role_desc as roleDesc
		from
		sys_role_tb r
		LEFT JOIN sys_user_role ur ON r.id = ur.role_id
		LEFT JOIN
		sys_user_tb
		u ON ur.user_id = u.id
		where 1=1
		<if test="null!=userId">
			and u.id=#{userId}
		</if>
	</select>
	
	<!-- 查询用户列表信息 -->
	<select id="selectBacklog" parameterType="map"
		resultType="com.alibaba.fastjson.JSONObject">
		SELECT
		tub.id AS id,
		tub.backlog_name AS backlogName,
		tub.user_id AS userId,
		tub.start_time AS startTime,
		tub.ent_time AS entTime,
		tub.state AS state,
		tub.is_close AS isClose,
        tub.backlog_type AS backlogType,
        tub.backlog_refid AS backlogRefid
		FROM
		tb_user_backlog AS tub
		where tub.is_close = 1
		<if test="null != userId">
			and tub.user_id=#{userId,jdbcType=BIGINT}
		</if>
		<if test="null != state">
			and tub.state=#{state,jdbcType=INTEGER}
		</if>
		ORDER BY start_time DESC
	</select>
    <update id="updateBacklog" parameterType="map">
        UPDATE tb_user_backlog
        SET is_close = 0
        WHERE
            id = #{logId,jdbcType=BIGINT}
    </update>
    <select id="selectOperationByMap" parameterType="map" resultType="int">
        SELECT
            count(1)
        FROM
            operation_record ore
        WHERE
            ore.user_id = #{userId} AND DATE_FORMAT(ore.create_time, '%Y-%m-%d') = CURDATE()
    </select>
    <insert id="insertOperationRecord" parameterType="map">
        INSERT INTO operation_record (
            user_id,
            creator_id,
            create_time,
            updator_id,
            update_time
        )
        VALUES
            (#{userId}, #{userId}, SYSDATE(), #{userId}, SYSDATE())
    </insert>
    <insert id="insertContractBcaklog" parameterType="map">
        INSERT INTO tb_user_backlog (
        backlog_type,
        backlog_refid,
        backlog_name,
        user_id,
        start_time,
        ent_time,
        state,
        is_close,
        creator_id,
        create_time,
        updator_id,
        update_time
        )
        SELECT
        3,
        tuc.id,
        CASE tuc.contract_type WHEN 1 THEN CONCAT("正式合同到期提醒：",pi.full_name)
        WHEN 2 THEN CONCAT("聘用合同到期提醒：",pi.full_name) ELSE '' END,
        pi.id,
        SYSDATE(),
        SYSDATE(),
        2,
        1,
        #{userId},
        SYSDATE(),
        #{userId},
        SYSDATE()
        FROM
        tb_user_contract tuc
        INNER JOIN person_info pi ON pi.id = tuc.user_id
        WHERE
        tuc.state = 1
        AND (
        (DATE_FORMAT(tuc.end_time, '%Y-%m-%d') - INTERVAL 10 DAY = CURDATE()
        AND contract_type = 2
        )
        OR (
        DATE_FORMAT(tuc.end_time, '%Y-%m-%d') - INTERVAL 40 DAY = CURDATE()
        AND contract_type = 1
        )
        )
    </insert>
    <select id="selectUserListByMap" parameterType="map" resultType="com.alibaba.fastjson.JSONObject">
    	SELECT
			sut.id AS id,
			sut.login_name AS loginName,
			sut.user_type AS userType,
			sut.user_name AS userName
		FROM
			sys_user_tb AS sut
		WHERE NOT EXISTS (SELECT pi.user_id from person_info pi WHERE pi.user_id = sut.id)
		and sut.hasvalid = 1
    </select>
        <select id="selectForCreateP"  resultType="com.yyx.system.entity.User">
    	SELECT
			sut.id AS id,
			sut.login_name AS loginName,
			sut.user_type AS userType,
			sut.user_name AS userName,
			sut.password AS password
		FROM
			sys_user_tb AS sut
		WHERE sut.id!=1
		and sut.hasvalid = 1
    </select>
    <!-- 关闭首页事项显示 -->
    <update id="closeFeedback" parameterType="map">
        UPDATE tb_user_backlog SET is_close = #{isClose,jdbcType=INTEGER} WHERE id = #{logId,jdbcType=BIGINT}
    </update>
</mapper>